# Generated by Django 5.1 on 2024-10-15 15:18

import django.core.validators
import django.db.models.deletion
import django_fsm
import multiselectfield.db.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Employer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('party_role_id', models.IntegerField()),
                ('nssf_no', models.CharField(max_length=255)),
                ('employer_name', models.CharField(max_length=255)),
                ('registry_dt', models.DateField(blank=True, null=True)),
                ('party_role_type_descr', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'employers',
            },
        ),
        migrations.CreateModel(
            name='Feedback3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Feedback4',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField()),
                ('fcr_resolved', models.BooleanField(blank=True, null=True)),
                ('ces_easy', models.IntegerField(blank=True, choices=[(1, 'Very hard'), (2, 'Hard'), (3, 'Easy'), (4, 'Very easy')], null=True)),
                ('overall_satisfaction', models.IntegerField(blank=True, choices=[(0, 'Not satisfied'), (1, 'Satisfied')], null=True)),
                ('additional_comments', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Getfeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fcr_resolved', models.BooleanField(blank=True, null=True)),
                ('nps_rating', models.IntegerField(blank=True, null=True)),
                ('ces_easy', models.BooleanField(blank=True, null=True)),
                ('overall_satisfaction', models.BooleanField(blank=True, null=True)),
                ('additional_comments', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='JotFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nps_rating', models.IntegerField()),
                ('fcr_resolved', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True)),
                ('ces_easy', models.CharField(blank=True, max_length=3, null=True)),
                ('overall_satisfaction', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True)),
                ('additional_comments', models.TextField(blank=True)),
                ('first_name', models.CharField(max_length=255)),
                ('yourphone', models.CharField(max_length=255)),
                ('csobranch', models.CharField(max_length=255)),
                ('csoname', models.CharField(max_length=255)),
                ('tstamp', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Mapped_employers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nssf_no', models.CharField(max_length=20)),
                ('employer_name', models.CharField(max_length=300)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Suspense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('member_id', models.CharField(blank=True, max_length=255, null=True)),
                ('member_name', models.CharField(blank=True, max_length=255, null=True)),
                ('member_identificat_val', models.CharField(blank=True, max_length=255, null=True)),
                ('submitted_file_name', models.CharField(blank=True, max_length=255, null=True)),
                ('submission_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('init_member_suspense_contr', models.FloatField(blank=True, null=True)),
                ('ident_member_suspense_contr', models.FloatField(blank=True, null=True)),
                ('cur_member_suspense_contr', models.FloatField(blank=True, null=True)),
                ('init_interest_suspense_amount', models.FloatField(blank=True, null=True)),
                ('cur_interest_suspense_amount', models.FloatField(blank=True, null=True)),
                ('ident_interest_suspense', models.FloatField(blank=True, null=True)),
                ('employer_name', models.CharField(blank=True, max_length=255, null=True)),
                ('employer_identificat_val', models.CharField(blank=True, max_length=255, null=True)),
                ('trn', models.CharField(blank=True, max_length=255, null=True)),
                ('receipt_number', models.CharField(blank=True, max_length=255, null=True)),
                ('payment_date', models.DateTimeField(blank=True, null=True)),
                ('statutory_ins_detail_id', models.FloatField(blank=True, null=True)),
                ('employerno', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Traffic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_date', models.DateField()),
                ('nssf_number', models.CharField(max_length=20)),
                ('channel', models.CharField(max_length=100)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('reason', models.TextField()),
                ('served_by', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='Deeds',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nssf_no', models.CharField(max_length=255)),
                ('employer_name', models.CharField(max_length=255)),
                ('From_Date', models.DateField(blank=True, null=True)),
                ('To_Date', models.DateField(blank=True, null=True)),
                ('First_Installment_Date', models.DateField(blank=True, null=True)),
                ('Second_Installment_Date', models.DateField(blank=True, null=True)),
                ('Deed_source', models.CharField(choices=[('legacy', 'legacy'), ('current', 'current')], max_length=255)),
                ('Legacy_status', models.BooleanField()),
                ('Signed_Deed', models.BooleanField()),
                ('date_created', models.DateField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('state', django_fsm.FSMField(choices=[('initiated', 'initiated'), ('recorded', 'Recorded'), ('forwarded', 'forwarded'), ('cancelled', 'Cancelled'), ('rejected', 'Rejected'), ('approved', 'Approved')], default='initiated', max_length=50)),
                ('remark', models.TextField(blank=True)),
                ('Branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='workflowapp.branch')),
                ('reviewer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviewed_deeds', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='deeds', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DeedsLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField()),
                ('action', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now=True, null=True)),
                ('deed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='workflowapp.deeds')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Engagement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', django_fsm.FSMField(choices=[('recorded', 'Recorded'), ('forwarded', 'forwarded'), ('cancelled', 'Cancelled'), ('rejected', 'Rejected'), ('approved', 'Approved')], default='recorded', max_length=50)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('modified_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('employer_name', models.CharField(max_length=130)),
                ('nssf_no', models.CharField(max_length=130)),
                ('main_activity', models.CharField(blank=True, choices=[('account4noncompliance', 'Account for non-compliance'), ('member_reg', 'Member registration'), ('legal', 'Record legal case')], max_length=100, null=True)),
                ('activity_done', multiselectfield.db.fields.MultiSelectField(choices=[('account4noncompliance', 'Account for non-compliance'), ('member_reg', 'Member registration'), ('assessment', 'Assessment'), ('fl', 'Financial Literacy'), ('roadshow', 'Roadshow'), ('audit', 'Compliance Audit'), ('inspection', 'Inspection'), ('senstisation', 'Senstisation'), ('support', 'Support'), ('recovery', 'Collections recovery'), ('emp_reg', 'Employer registration'), ('mapping', 'Mapping'), ('suspe', 'Suspence clearence'), ('closure', 'Employer closure')], max_length=132)),
                ('action_date', models.DateField(blank=True, null=True)),
                ('comment', models.TextField(blank=True)),
                ('remark', models.TextField(blank=True)),
                ('reason_for_non_compliance', models.CharField(blank=True, choices=[('inconsistent_funding', 'Inconsistent funding from government/donors'), ('covid19_effects', 'Covid-19 effects'), ('economic_strain', 'Economic strain and cash flow challenges'), ('employer_not_started', 'Employer was registered but hasn’t started operating'), ('unable_to_locate_employer', 'Inability to locate employer/briefcase company'), ('hard_to_reach_employer', 'Hard to reach employer (very far)'), ('high_employer_to_rm_ratio', 'High employer to RM ratio'), ('ignorance_of_nssf_law', 'Ignorance of the NSSF law'), ('informal_employer_closure', 'Informal employer closure'), ('informal_employments', 'Informal employments (casual laborers)'), ('lack_of_trust_in_nssf', 'Lack of trust in the NSSF brand'), ('non_payment_during_school_holidays', 'Non-payment during school holidays'), ('system_breakdown', 'Painful system experiences and breakdown/internet connectivity issues'), ('political_instability', 'Political instability'), ('political_interference', 'Political interference and restricted access to employer premises'), ('stubborn_employer', 'Stubborn and adamant employer'), ('unfavorable_registration_requirements', 'Unfavorable registration requirements for new members and employers')], max_length=50, null=True)),
                ('reviewer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviewed_engagements', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='engagements', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EngagementLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField()),
                ('action', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now=True, null=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='workflowapp.engagement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='engagement_logs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Forclosure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', django_fsm.FSMField(choices=[('initiated', 'Initiated'), ('cancelled', 'Cancelled'), ('first_reviewed', 'First_reviewed'), ('resubmited', 'Resubmited'), ('assigned', 'Assigned'), ('rejected', 'Rejected'), ('reversed', 'Reversed'), ('approved', 'Approved')], default='initiated', max_length=50)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('employer_name', models.CharField(max_length=130)),
                ('nssf_no', models.CharField(max_length=130)),
                ('reason', models.CharField(choices=[('nira', 'Employer closed in NIRA'), ('others', 'Others')], max_length=30)),
                ('remark', models.TextField(blank=True)),
                ('review_comment', models.TextField(blank=True)),
                ('next_action_user', models.ForeignKey(blank=True, limit_choices_to={'groups__name': 'Assessors'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='next_action_forclosures', to=settings.AUTH_USER_MODEL)),
                ('reviewer', models.ForeignKey(limit_choices_to={'groups__name': 'Supervisors'}, on_delete=django.db.models.deletion.CASCADE, related_name='reviewed_forclosures', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forclosures', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ForclosureLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_comment', models.TextField()),
                ('action', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='workflowapp.forclosure')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forclosure_logs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Generalcase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', django_fsm.FSMField(choices=[('recorded', 'Recorded'), ('forwarded', 'forwarded'), ('cancelled', 'Cancelled'), ('rejected', 'Rejected'), ('approved', 'Approved')], default='recorded', max_length=50)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('modified_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('subject', models.CharField(max_length=130)),
                ('action_date', models.DateTimeField()),
                ('any_other_info', models.CharField(max_length=130)),
                ('remark', models.TextField(blank=True)),
                ('comment', models.TextField(blank=True)),
                ('reviewer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviewed_generalcases', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generalcases', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='attachments/')),
                ('deed', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='workflowapp.deeds')),
                ('engagement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='workflowapp.engagement')),
                ('forclosure', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='workflowapp.forclosure')),
                ('generalcase', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='workflowapp.generalcase')),
            ],
        ),
        migrations.CreateModel(
            name='GeneralcaseLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remark', models.TextField()),
                ('action', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now=True, null=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='workflowapp.generalcase')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generalcase_logs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Outbound',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('channel', models.CharField(choices=[('Walkin', 'Walkin'), ('Call center', 'Call Quality'), ('Online', 'Online'), ('NPS', 'NPS'), ('Look & Feel', 'Look & Feel'), ('First contact resolution', 'First contact resolution')], max_length=100)),
                ('customer_name', models.CharField(blank=True, max_length=100, null=True)),
                ('customer_contact', models.CharField(blank=True, max_length=15, null=True)),
                ('nssf_number', models.CharField(blank=True, max_length=20, null=True)),
                ('nps', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('fcr_resolved', models.IntegerField(blank=True, choices=[(1, 'Yes'), (0, 'No')], null=True)),
                ('ces_easy', models.IntegerField(blank=True, choices=[(1, 'Very hard'), (2, 'Hard'), (3, 'Easy'), (4, 'Very easy')], null=True)),
                ('overall_satisfaction', models.IntegerField(blank=True, choices=[(0, 'Not satisfied'), (1, 'Satisfied')], null=True)),
                ('additional_comments', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('branch', models.CharField(blank=True, choices=[('Acacia', 'Acacia'), ('Arua', 'Arua'), ('Bakuli', 'Bakuli'), ('Bugolobi', 'Bugolobi'), ('Customer Service Center', 'Customer Service Center'), ('Entebbe', 'Entebbe'), ('Fort Portal', 'Fort Portal'), ('Gulu', 'Gulu'), ('Hoima', 'Hoima'), ('Ishaka', 'Ishaka'), ('Jinja', 'Jinja'), ('Kabale', 'Kabale'), ('Kampala City', 'Kampala City'), ('Lira', 'Lira'), ('Masaka', 'Masaka'), ('Masindi', 'Masindi'), ('Mbale', 'Mbale'), ('Mbarara', 'Mbarara'), ('Moroto', 'Moroto'), ('Mukono', 'Mukono'), ('Soroti', 'Soroti'), ('Tororo', 'Tororo')], max_length=100, null=True)),
                ('reason_for_visit', models.CharField(blank=True, choices=[('Balance request', 'Balance request'), ('Benefits follow up', 'Benefits follow up'), ('Benefits verification', 'Benefits verification'), ('Call Center login/logout', 'Call Center login/logout'), ('Claim inquiry', 'Claim inquiry'), ('Claim received', 'Claim received'), ('Clearance certificate', 'Clearance certificate'), ('Clearance of sheet B', 'Clearance of sheet B'), ('Compliance Audit', 'Compliance Audit'), ('Conduct roadshows', 'Conduct roadshows'), ('Contact update', 'Contact update'), ('Contributions receipting', 'Contributions receipting'), ('Corporate social responsibility', 'Corporate social responsibility'), ('COVID Invalidity benefits', 'COVID Invalidity benefits'), ('COVID Survivor’s benefits', 'COVID Survivor’s benefits'), ('Customer engagement message', 'Customer engagement message'), ('Discussion of draft audit report', 'Discussion of draft audit report'), ('Docked Pas claims', 'Docked Pas claims'), ('Duplicate cards', 'Duplicate cards'), ('Employee engagement collection', 'Employee engagement collection'), ('Employee registration', 'Employee registration'), ('Employer registration', 'Employer registration'), ('Financial literacy', 'Financial literacy'), ('General inquiry', 'General inquiry'), ('Inspection of employers', 'Inspection of employers'), ('Issuing clearance certificate', 'Issuing clearance certificate'), ('KYC Updates', 'KYC Updates'), ('Member details update', 'Member details update'), ('Midterm access inquiry', 'Midterm access inquiry'), ('Midterm claim follow up', 'Midterm claim follow up'), ('Midterm claim received', 'Midterm claim received'), ('No show customer', 'No show customer'), ('NSSF number retrieval', 'NSSF number retrieval'), ('NSSF Smart card', 'NSSF Smart card'), ('Office location', 'Office location'), ('Office opening hours', 'Office opening hours'), ('Outbound escalation', 'Outbound escalation'), ('Real estate inquiry', 'Real estate inquiry'), ('Self assessment test (SAT)', 'Self assessment test (SAT)'), ('Sensitization', 'Sensitization'), ('SmartLife', 'SmartLife'), ('Spam mail.', 'Spam mail.'), ('Statement request', 'Statement request'), ('Statement enquiries', 'Statement enquiries'), ('Statement update', 'Statement update'), ('Unsuccessful calls', 'Unsuccessful calls'), ('Voluntary company registration', 'Voluntary company registration'), ('Voluntary inquiry', 'Voluntary inquiry'), ('Voluntary member registration', 'Voluntary member registration'), ('Whistleblower', 'Whistleblower')], max_length=100, null=True)),
                ('verbatim_rating', models.TextField(blank=True, null=True)),
                ('front_office_reasons', models.CharField(blank=True, choices=[('Good/positive CSO attitude', 'Good/positive CSO attitude'), ('Poor/negative attitude', 'Poor/negative attitude'), ('Good/clear CSO explanation', 'Good/clear CSO explanation'), ('Poor/unclear CSO explanation', 'Poor/unclear CSO explanation'), ('Fast/Quick CSO handling time', 'Fast/Quick CSO handling time'), ('Slow/delayed CSO handling time', 'Slow/delayed CSO handling time'), ('CSO knowledgeable', 'CSO knowledgeable'), ('CSO not knowledgeable', 'CSO not knowledgeable'), ('Good CSO listening skills', 'Good CSO listening skills'), ('Poor CSO listening skill', 'Poor CSO listening skill'), ('Full CSO attention', 'Full CSO attention'), ('Divided CSO attention', 'Divided CSO attention'), ('Quick/Good CSO resolution', 'Quick/Good CSO resolution'), ('Good CSO skill', 'Good CSO skill'), ('Poor CSO skill', 'Poor CSO skill'), ('Nothing extra ordinary', 'Nothing extra ordinary'), ('None', 'None')], max_length=100, null=True)),
                ('back_office_reasons', models.CharField(blank=True, choices=[('Easy finding and recognizing', 'Easy finding and recognizing'), ('Difficult finding and recognizing', 'Difficult finding and recognizing'), ('Quick/Fast escalation process', 'Quick/Fast escalation process'), ('Slow/poor escalation process', 'Slow/poor escalation process'), ('Up to date contributions', 'Up to date contributions'), ('Missing contributions', 'Missing contributions'), ('Fast Benefits process', 'Fast Benefits process'), ('Slow/delayed benefits process', 'Slow/delayed benefits process'), ('Process simplicity', 'Process simplicity'), ('Process difficulty', 'Process difficulty'), ('System is fast and stable', 'System is fast and stable'), ('System is slow and unstable', 'System is slow and unstable'), ('Acceptable waiting time', 'Acceptable waiting time'), ('Long waiting time', 'Long waiting time'), ('Limited product offering', 'Limited product offering'), ('Limited language offering', 'Limited language offering'), ('Wrong interest calculation', 'Wrong interest calculation'), ('Good/high interest', 'Good/high interest'), ('Poor/low interest', 'Poor/low interest'), ('Positive organizational reputation', 'Positive organizational reputation'), ('Negative organizational reputation', 'Negative organizational reputation'), ('Delayed system updates', 'Delayed system updates'), ('None', 'None')], max_length=100, null=True)),
                ('greeting_and_enthusiasm', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)])),
                ('emotional_connection', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(25)])),
                ('resolution_and_professionalism', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(35)])),
                ('hold_procedure', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('call_closure', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('zero_rated', models.BooleanField(default=False)),
                ('served_by', models.ForeignKey(limit_choices_to={'groups__name': 'Supervisors'}, on_delete=django.db.models.deletion.CASCADE, related_name='Outbound_served_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outbound_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='branch',
            name='Region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='workflowapp.region'),
        ),
        migrations.CreateModel(
            name='TeamLeader',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('Region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='workflowapp.region')),
            ],
        ),
        migrations.AddField(
            model_name='deeds',
            name='team_leader',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='workflowapp.teamleader'),
        ),
        migrations.AddField(
            model_name='branch',
            name='team_leader',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='workflowapp.teamleader'),
        ),
    ]
